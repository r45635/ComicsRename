#!/usr/bin/env python3
"""
Test rapide pour v√©rifier que le cover_local_path est correctement transmis
"""

import os
import sys
import tempfile

# Add the project directory to the path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_cache_integration():
    """Test que le cover_local_path est bien transmis lors du drag & drop"""
    
    print("=== Test d'int√©gration du cache cover_local_path ===")
    
    # Simuler des m√©tadonn√©es avec cover_local_path
    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
        temp_file.write(b"fake image data")
        cached_path = temp_file.name
    
    # M√©tadonn√©es comme elles seraient dans l'album
    test_meta = {
        'album_id': '51823',
        'album_name': '√Çme Rouge',
        'album_number': '3',
        'cover_url': 'https://www.bedetheque.com/media/Couvertures/Couv_51823.jpg',
        'cover_local_path': cached_path  # Ceci devrait maintenant √™tre pr√©sent
    }
    
    print(f"‚úÖ M√©tadonn√©es test cr√©√©es avec cover_local_path: {cached_path}")
    
    # Test la logique de d√©cision du cache dans SafeRename
    local_cover_path = test_meta.get('cover_local_path', '')
    if local_cover_path and os.path.exists(local_cover_path):
        print(f"‚úÖ Cache serait utilis√©: {local_cover_path}")
        use_cache = True
    else:
        print(f"‚ùå Cache ne serait pas utilis√©")
        use_cache = False
    
    # Test la s√©rialisation JSON (comme dans le drag & drop)
    import json
    meta_json = json.dumps(test_meta, default=str)
    deserialized_meta = json.loads(meta_json)
    
    if 'cover_local_path' in deserialized_meta:
        print(f"‚úÖ cover_local_path survit √† la s√©rialisation JSON")
        print(f"   Chemin: {deserialized_meta['cover_local_path']}")
    else:
        print(f"‚ùå cover_local_path perdu lors de la s√©rialisation JSON")
    
    # Test de la logique comme dans SafeRename
    local_cover_path = deserialized_meta.get('cover_local_path', '')
    if local_cover_path and os.path.exists(local_cover_path):
        print(f"‚úÖ SafeRename utiliserait le cache apr√®s d√©s√©rialisation")
    else:
        print(f"‚ùå SafeRename n'utiliserait pas le cache apr√®s d√©s√©rialisation")
    
    # Nettoyage
    os.unlink(cached_path)
    
    return use_cache

def main():
    """Test principal"""
    
    print("Test d'int√©gration de l'optimisation SafeRename")
    print("=" * 50)
    
    success = test_cache_integration()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ Test r√©ussi ! Le cache devrait maintenant fonctionner.")
        print("\nCe qui devrait maintenant se passer :")
        print("1. ‚úÖ Affichage d'une couverture ‚Üí cache cr√©√©")
        print("2. ‚úÖ Drag & drop de cet album ‚Üí cover_local_path transmis")
        print("3. ‚úÖ SafeRename ‚Üí utilise le cache au lieu de t√©l√©charger")
        print("4. ‚úÖ Performance am√©lior√©e !")
    else:
        print("‚ùå Test √©chou√©. Le cache ne fonctionnerait pas.")
    
    print("\nPour tester en r√©el :")
    print("1. Lancez l'application")
    print("2. Recherchez des albums (ex: 'blacksad')")
    print("3. Cliquez sur un album pour afficher sa couverture")
    print("4. Faites un drag & drop sur un PDF")
    print("5. V√©rifiez les logs pour voir si le cache est utilis√©")

if __name__ == "__main__":
    main()
