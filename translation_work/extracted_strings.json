{
  "strings": [
    "\n        ]\n        \n        return any(indicator in line_content for indicator in ui_indicators)\n    \n    def _get_line_number(self, content: str, position: int) -> int:\n        ",
    "\n        matches = re.finditer(pattern, content, re.MULTILINE)\n        \n        for match in matches:\n            string_val = match.group(1)\n            if self._is_translatable_string(string_val):\n                strings.add(string_val)\n                self._add_context(string_val, file_path, self._get_line_number(content, match.start()))\n        \n        return strings\n    \n    def _extract_user_messages(self, content: str, file_path: str) -> Set[str]:\n        ",
    "\n        strings = set()\n        \n        pattern = r",
    "\n        strings = set()\n        \n        patterns = [\n            r",
    "   (Allez dans votre profil ‚Üí API pour g√©n√©rer une cl√©)",
    "   (Ils seront stock√©s dans .env, prot√©g√© par .gitignore)",
    "   ... and {len(results[",
    "   ... et {len(albums) - 3} autres albums",
    "   ./launch.sh       (macOS/Linux)",
    "   1. Lancez l",
    "   1. Premi√®re recherche: Cr√©ation session + authentification",
    "   1. üñ±Ô∏è  Double-clic sur le nom du dossier",
    "   2. Ouvrez un dossier avec des fichiers",
    "   2. Recherches suivantes: R√©utilisation de la session existante",
    "   2. ‚úèÔ∏è  Passage en mode √©dition (fond jaune, bordure bleue)",
    "   3. Double-cliquez sur le nom du dossier en haut",
    "   3. En cas d",
    "   3. ‚å®Ô∏è  Saisie du nouveau nom du dossier",
    "   4. Changement d",
    "   4. Modifiez le nom et appuyez sur Entr√©e",
    "   4. ‚úÖ Validation par Entr√©e ou perte de focus",
    "   5. üîç V√©rification que le nouveau nom est valide",
    "   6. ‚ùì Demande de confirmation √† l",
    "   7. üìÅ Renommage effectif du dossier",
    "   8. üîÑ Rechargement des fichiers dans le nouveau dossier",
    "   9. üìç Mise √† jour des param√®tres (last_folder)",
    "   Assurez-vous que bdgest_scraper_api.py est dans le m√™me r√©pertoire.",
    "   BDGEST_PASSWORD=votre_mot_de_passe",
    "   BDGEST_USERNAME=votre_nom_utilisateur",
    "   Donn√©es de la s√©rie: {first_series}",
    "   Fichier de log: {args.log_file}",
    "   Files processed: {results[",
    "   Mode debug: {debug_mode}",
    "   Mode verbose: {args.verbose}",
    "   Strings found: {results[",
    "   Terme de recherche: ",
    "   Utilisateur: {username}",
    "   Utilisez -u/-p ou cr√©ez un fichier .env avec:",
    "   Utilisez les variables d",
    "   Vous pouvez maintenant utiliser ComicsRename en toute s√©curit√©.",
    "   ou cr√©ez un fichier .env avec:",
    "   pip install -r requirements.txt",
    "   pip install PySide6 requests beautifulsoup4 lxml python-dotenv",
    "   python main.py",
    "   {i+1}. {album_name} (#{album_number}) - {album_date}",
    "   {i:2d}. {string_val}",
    "   {i}. {issue}",
    "   ‚Ä¢ Annulation possible avec √âchap",
    "   ‚Ä¢ Authentification uniquement quand n√©cessaire",
    "   ‚Ä¢ Confirmation obligatoire de l",
    "   ‚Ä¢ Entr√©e: Valider le nouveau nom",
    "   ‚Ä¢ Gestion automatique des erreurs d",
    "   ‚Ä¢ Gestion des erreurs (permissions, etc.)",
    "   ‚Ä¢ Mode lecture: Aspect normal",
    "   ‚Ä¢ Mode √©dition: Fond jaune, bordure bleue",
    "   ‚Ä¢ Performance am√©lior√©e pour les recherches multiples",
    "   ‚Ä¢ Perte de focus: Valider le nouveau nom",
    "   ‚Ä¢ Restauration du nom original en cas d",
    "   ‚Ä¢ R√©utilisation des cookies et tokens",
    "   ‚Ä¢ Session persistante entre les recherches",
    "   ‚Ä¢ S√©lection automatique du texte en mode √©dition",
    "   ‚Ä¢ Validation du nom (caract√®res autoris√©s)",
    "   ‚Ä¢ V√©rification de l",
    "   ‚Ä¢ extracted_strings.json    - Complete extraction data",
    "   ‚Ä¢ strings_list.txt         - Simple list for reference",
    "   ‚Ä¢ translation_template.json - Template for translators",
    "   ‚Ä¢ {failed}",
    "   ‚Ä¢ √âchap: Annuler et restaurer le nom original",
    "   ‚ö†Ô∏è  .env file is empty",
    "   ‚ö†Ô∏è  .env file not found (optional)",
    "   ‚úÖ .env file exists",
    "   ‚úÖ .env file has content",
    "   ‚úÖ .env.example template exists",
    "   ‚úÖ ComicRenamer class found",
    "   ‚úÖ PySide6 GUI components available",
    "   ‚úÖ Python {version.major}.{version.minor}.{version.micro} (OK)",
    "   ‚úÖ setup_credentials.py exists",
    "   ‚úÖ {file_name}",
    "   ‚úÖ {module_name}: {description}",
    "   ‚úÖ {package_name}: {version}",
    "   ‚ùå .env.example template missing",
    "   ‚ùå ComicRenamer class not found",
    "   ‚ùå Error reading .env file: {e}",
    "   ‚ùå GUI components unavailable: {e}",
    "   ‚ùå Python {version.major}.{version.minor}.{version.micro} (Required: 3.8+)",
    "   ‚ùå setup_credentials.py missing",
    "   ‚ùå {file_name}: Missing",
    "   ‚ùå {module_name}: {description} - {e}",
    "   ‚ùå {package_name}: Not installed",
    "  10. üì¢ Message de confirmation",
    "  [Issue {i}] id={issue.get(",
    "  [Series {i}] id={series.get(",
    "  {key}: {",
    "  {key}: {value}",
    " existe d√©j√† dans ce dossier.",
    " existe d√©j√† dans ce r√©pertoire.",
    " in str(ctx):\n                notes.append(",
    ")\n\n    def _enable_folder_rename_btn(self, *args):\n        self.folder_rename_btn.setEnabled(True)\n\n    def _on_album_selection_changed(self, selected, deselected):\n        # Enable if any row is selected, else disable\n        selected_rows = self.album_table.selectionModel().selectedRows()\n        self.folder_rename_btn.setEnabled(bool(selected_rows))\n\n    def _on_series_selection_changed(self, txt):\n        ",
    ")\n\n    def _enable_folder_rename_btn(self, *args):\n        self.folder_rename_btn.setEnabled(True)\n\n    def _on_album_selection_changed(self, selected, deselected):\n        # Enable if any row is selected, else disable\n        selected_rows = self.album_table.selectionModel().selectedRows()\n        self.folder_rename_btn.setEnabled(bool(selected_rows))\n\n    def _populate_albums(self, txt):\n        if not txt:\n            return\n        self.album_table.clearContents()\n        self.album_table.setRowCount(0)\n        self.series_cover_url = ",
    ")\n\nclass AlbumTable(QTableWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.main = parent\n        self.setSelectionBehavior(QAbstractItemView.SelectRows)\n        self.setDragEnabled(True)\n        self.setColumnCount(1)\n        self.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)\n        self.setEditTriggers(QAbstractItemView.NoEditTriggers)\n        self.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.customContextMenuRequested.connect(self._show_context_menu)\n\n    def mouseMoveEvent(self, event):\n        it = self.itemAt(event.pos())\n        if not it:\n            return\n        print(f",
    ")\n                    continue\n                # Nettoie le nom du fichier (enl√®ve les caract√®res interdits)\n                base_name = os.path.basename(src).replace(",
    ")\n                    return\n                for s in sorted(self.issues_by_series):\n                    self.series_combo.addItem(f",
    ")\n                else:\n                    # Clear album table since we",
    ")\n                self.issues_by_series = issues_by_series\n                if not issues_by_series:\n                    QMessageBox.warning(self, ",
    ")\n            else:\n                print(f",
    ")\n            return\n        # Build new filename\n        series = meta.get(",
    ")\n            return\n        # Clean up names\n        clean = lambda s: ",
    ")\n            return\n        current_folder = pathlib.Path(self.files[0][",
    ")\n            return\n        f = self.files[fr]\n        itm = self.album_table.item(ar, 0)\n        meta = itm.data(Qt.UserRole) if itm else None\n        if not meta:\n            QMessageBox.critical(self, ",
    ")\n            return\n        if QMessageBox.question(self, ",
    ")\n            return\n        itm = self.album_table.item(ar, 0)\n        meta = itm.data(Qt.UserRole) if itm else None\n        if not meta:\n            QMessageBox.critical(self, ",
    ")\n        elif action == reveal_action:\n            try:\n                subprocess.Popen([",
    ")\n        else:\n            albums = []\n            for album in series_list:\n                s = album.get(",
    ")\n        else:  # BDGest\n            # Check if SeriesName checkbox is checked\n            if self.series_name_cb.isChecked():\n                # Use series-only search\n                series_results = provider.search_series_only(q, debug=debug, verbose=verbose) \\\n                    if hasattr(provider, ",
    ")\n        for w in (self.source_combo, self.search_bar, self.search_btn, self.dir_btn, self.recursive_cb, self.settings_btn):\n            ctrl.addWidget(w)\n        layout.addLayout(ctrl)\n\n        splitter_main = QSplitter(Qt.Horizontal)\n\n        # --- Folder display ---\n        file_panel = QWidget()\n        file_panel_layout = QVBoxLayout(file_panel)\n        file_panel_layout.setContentsMargins(0, 0, 0, 0)\n        folder_display_layout = QHBoxLayout()\n        self.folder_display = DraggableLineEdit()\n        # Add the rename folder button\n        self.folder_rename_btn = QPushButton(",
    ")\n        self.dir_btn = QPushButton(",
    ")\n        self.folder_rename_btn.setFixedWidth(30)\n        self.folder_rename_btn.setEnabled(False)  # Disabled by default\n        self.folder_rename_btn.clicked.connect(self._rename_folder_to_serie)\n        folder_display_layout.addWidget(self.folder_display)\n        folder_display_layout.addWidget(self.folder_rename_btn)\n        file_panel_layout.addLayout(folder_display_layout)\n        self.file_table = FileTable(self)\n        self.file_table.setColumnCount(4)\n        self.file_table.setHorizontalHeaderLabels([",
    ")\n        self.folder_rename_btn.setToolTip(",
    ")\n        self.folder_rename_btn.setToolTip(tr(",
    ")\n        self.layout = QFormLayout(self)\n\n        self.settings = settings or QSettings(",
    ")\n        self.recursive_cb = QCheckBox(",
    ")\n        self.rename_btn = QPushButton(",
    ")\n        self.resize(1400, 800)\n        self.settings = QSettings(",
    ")\n        self.settings_btn.setFixedWidth(30)\n        self.settings_btn.setToolTip(",
    ")\n        self.settings_btn.setFixedWidth(30)\n        self.settings_btn.setToolTip(tr(",
    "))\n                    return\n                for s in sorted(self.issues_by_series):\n                    self.series_combo.addItem(f",
    "))\n                return\n            import shutil\n            for src in files_to_add:\n                # V√©rifie que le fichier existe\n                if not os.path.exists(src):\n                    QMessageBox.critical(self, tr(",
    "))\n                return\n            op = ",
    "))\n            return\n        # Clean up names\n        clean = lambda s: ",
    "))\n            return\n        # Extract serie_name\n        serie_name = meta.get(",
    "))\n            return\n        current_folder = pathlib.Path(self.files[0][",
    "))\n            return\n        itm = self.album_table.item(ar, 0)\n        meta = itm.data(Qt.UserRole) if itm else None\n        if not meta:\n            QMessageBox.critical(self, tr(",
    "))\n            self._cancel_editing()\n            return\n        \n        # Check if folder with new name already exists\n        new_folder_path = self._original_folder_path.parent / cleaned_name\n        if new_folder_path.exists():\n            QMessageBox.critical(self.main_window, tr(",
    "))\n        for w in (self.source_combo, self.search_bar, self.search_btn, self.dir_btn, self.recursive_cb, self.series_name_cb, self.settings_btn):\n            ctrl.addWidget(w)\n        layout.addLayout(ctrl)\n\n        splitter_main = QSplitter(Qt.Horizontal)\n\n        # --- Folder display ---\n        file_panel = QWidget()\n        file_panel_layout = QVBoxLayout(file_panel)\n        file_panel_layout.setContentsMargins(0, 0, 0, 0)\n        folder_display_layout = QHBoxLayout()\n        self.folder_display = EditableFolderLineEdit(main_window=self)\n        # Add the rename folder button\n        self.folder_rename_btn = QPushButton(",
    "))\n        self.dir_btn = QPushButton(tr(",
    "))\n        self.folder_rename_btn.setFixedWidth(30)\n        self.folder_rename_btn.setEnabled(False)  # Disabled by default\n        self.folder_rename_btn.clicked.connect(self._rename_folder_to_serie)\n        folder_display_layout.addWidget(self.folder_display)\n        folder_display_layout.addWidget(self.folder_rename_btn)\n        file_panel_layout.addLayout(folder_display_layout)\n        self.file_table = FileTable(self)\n        self.file_table.setColumnCount(4)\n        self.file_table.setHorizontalHeaderLabels([",
    "))\n        self.layout = QFormLayout(self)\n\n        self.settings = settings or QSettings(",
    "))\n        self.recursive_cb = QCheckBox(",
    "))\n        self.rename_btn = QPushButton(tr(",
    "))\n        self.resize(1400, 800)\n        self.settings = QSettings(",
    "))\n        self.series_name_cb.setVisible(False)  # Hidden by default, shown only for BDGest\n        self.settings_btn = QPushButton(",
    ")))\n\n    def _rename_folder_to_serie(self):\n        # Get current folder path\n        if not self.files:\n            QMessageBox.warning(self, ",
    ")))\n\n    def _rename_folder_to_serie(self):\n        # Get current folder path\n        if not self.files:\n            QMessageBox.warning(self, tr(",
    ")))\n        else:\n            # If nothing selected, show root folder name\n            self.folder_display.setText(os.path.basename(self.settings.value(",
    "), str(e))\n\n    def _open_settings(self):\n        dlg = SettingsDialog(self, self.settings)\n        if dlg.exec():\n            # Invalidate BDGest session when settings change (credentials might have changed)\n            bdgest_provider = PROVIDERS.get(",
    "), str(e))\n            return\n\n        # External file drop (from Finder, etc.)\n        if event.mimeData().hasUrls():\n            urls = event.mimeData().urls()\n            supported_exts = (",
    "), tr(",
    ").rstrip(",
    ",\n            r",
    ",\n        ]\n        \n        for pattern in patterns:\n            matches = re.finditer(pattern, content, re.MULTILINE)\n            for match in matches:\n                string_val = match.group(1)\n                if self._is_translatable_string(string_val):\n                    strings.add(string_val)\n                    self._add_context(string_val, file_path, self._get_line_number(content, match.start()))\n        \n        return strings\n    \n    def _extract_ui_strings(self, content: str, file_path: str) -> Set[str]:\n        ",
    ", error=str(e)))\n                self._cancel_editing()\n                return\n        \n        # Reset to read-only mode\n        self._reset_to_readonly()\n\n    def _cancel_editing(self):\n        ",
    ", f",
    ", msg, QMessageBox.Yes | QMessageBox.No) != QMessageBox.Yes:\n                return\n            dest_folder = self.main.files[0][",
    ", msg, QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes:\n            try:\n                if not os.path.exists(str(f[",
    ", name=cleaned_name))\n                \n            except Exception as e:\n                QMessageBox.critical(self.main_window, tr(",
    ", name=cleaned_name))\n            self._cancel_editing()\n            return\n        \n        # Confirm rename\n        reply = QMessageBox.question(\n            self.main_window,\n            tr(",
    ", name=new_name))\n                        return\n                    os.rename(f[",
    ", name=new_name))\n            return\n        if QMessageBox.question(self, tr(",
    ", new_name=new_name), QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes:\n            try:\n                if not os.path.exists(str(f[",
    ", path=f[",
    ", path=src))\n                    continue\n                # Nettoie le nom du fichier (enl√®ve les caract√®res interdits)\n                base_name = os.path.basename(src).replace(",
    ", str(e))\n\n    def _show_context_menu(self, pos):\n        row = self.rowAt(pos.y())\n        if row < 0:\n            return\n        menu = QMenu(self)\n        open_action = menu.addAction(",
    "/\\\\",
    "Ajouter des fichiers",
    "Album metadata missing",
    "Application Settings",
    "Aucun album trouv√© pour cette recherche sur BDGest.",
    "Aucun album trouv√© pour cette recherche.",
    "Aucun dossier actif pour l",
    "Aucun fichier dans le dossier.",
    "Aucun r√©sultat",
    "Aucune s√©rie trouv√©e pour cette recherche sur BDGest.",
    "Avertissement",
    "Comic Renamer - Multi-Source",
    "ComicsRename String Extraction Tool",
    "Constructed URL: {url}",
    "Could not open file:\\n{e}",
    "Could not reveal file:\\n{e}",
    "Couverture: {series[",
    "Dernier dossier utilis√©",
    "Details: {e}",
    "Disques externes (/Volumes)",
    "Dossier personnel",
    "Dossier renomm√© en :\\n{new_folder_name}",
    "Encoded Name: {encoded_series_name}",
    "Erreur",
    "Erreur lors du renommage du dossier :\\n{e}",
    "Error",
    "Error processing {file_path}: {e}",
    "Error starting application: {e}",
    "Error: Missing dependencies. Please install requirements:",
    "Expected URL: {expected_url}",
    "Extract strings from QMessageBox calls",
    "Extract strings from addItem calls",
    "Extracting from: {file_path}",
    "Format non support√©",
    "Impossible de d√©terminer le nom de la s√©rie.",
    "Info",
    "La fonction fetch_albums_by_series_id r√©cup√®re maintenant les d√©tails des albums",
    "La fonctionnalit√© de renommage par double-clic est op√©rationnelle.",
    "Language Change",
    "Language will be applied after restarting the application.",
    "Le dossier porte d√©j√† ce nom.",
    "Le fichier source n",
    "Le syst√®me de gestion de session est op√©rationnel.",
    "Mot de passe configur√©: {",
    "M√©tadonn√©es de l",
    "No Results",
    "No albums found for this search.",
    "Nom: {series[",
    "O√π souhaitez-vous commencer la navigation ?",
    "Param√®tres",
    "Param√®tres de BDGestProvider.search_albums_by_series_id: {provider_params}",
    "Param√®tres de get_bdgest_albums_by_series_id: {params}",
    "Pays: {series[",
    "Please select one file and one album",
    "Rename",
    "Rename Error",
    "Renommer le dossier",
    "Renommer le dossier avec le nom de la s√©rie s√©lectionn√©e",
    "R√©sultat",
    "Scanning directory: {script_dir}",
    "Selection",
    "Series ID: {series_id}",
    "Series Name: {series_name}",
    "Seuls les fichiers PDF, EPUB, CBZ ou CBR sont accept√©s.",
    "Succ√®s",
    "S√©lection",
    "S√©lection du dossier",
    "Translation template saved to: {output_file}",
    "URL: {series[",
    "Un dossier nomm√© ",
    "Un fichier nomm√© ",
    "Utilisateur configur√©: {",
    "Valeur par d√©faut fetch_details dans provider: {provider_default}",
    "Valeur par d√©faut fetch_details: {default_fetch_details}",
    "Valeur par d√©faut max_workers: {default_max_workers}",
    "Veuillez s√©lectionner un album dans la liste.",
    "\\nD√©tails complets:",
    "\\nFor installation help, see:",
    "\\nOr use the launcher scripts:",
    "\\nPlease fix the issues above.",
    "\\nTo start the application, run:",
    "\\n‚å®Ô∏è Raccourcis clavier:",
    "\\n‚öôÔ∏è  Checking configuration...",
    "\\n‚úÖ All tests passed!",
    "\\n‚úÖ Structure des fonctions correcte !",
    "\\n‚úÖ Test termin√© avec succ√®s!",
    "\\n‚úÖ Tests r√©ussis! La fonctionnalit√© de r√©cup√©ration d",
    "\\n‚ùå Certains tests ont √©chou√©.",
    "\\n‚ùå Test √©chou√©.",
    "\\nüéâ Test r√©ussi!",
    "\\nüéâ Tous les tests r√©ussis !",
    "\\nüé® Indicateurs visuels:",
    "\\nüéØ Top 10 strings to translate:",
    "\\nüí° If dependencies are missing, try:",
    "\\nüí° Pour tester:",
    "\\nüìÅ Checking project files...",
    "\\nüìÅ Output files created in: {output_dir}",
    "\\nüìä Extraction Results:",
    "\\nüìã Avantages de la nouvelle impl√©mentation:",
    "\\nüìã Workflow complet:",
    "\\nüìö Albums trouv√©s:",
    "\\nüìö S√©rie #{i}",
    "\\nüì¶ Checking dependencies...",
    "\\nüîÑ Comportement:",
    "\\nüîç Fonctionnalit√©s d",
    "\\nüîç Test des m√©thodes de gestion de session:",
    "\\nüîç Testing function availability...",
    "\\nüîë Test de r√©cup√©ration des identifiants:",
    "\\nüîß Testing module imports...",
    "\\nüñ•Ô∏è  Checking GUI availability...",
    "\\nüõ°Ô∏è Protections impl√©ment√©es:",
    "])\n        default_provider = self.settings.value(",
    "])\n        idx = self.provider_combo.findText(self.default_provider)\n        if idx >= 0:\n            self.provider_combo.setCurrentIndex(idx)\n        self.provider_combo.setCurrentIndex(idx if idx >= 0 else 0)\n\n        self.files = []\n        self._source = self.provider_combo.currentText()\n        self.issues_by_series = defaultdict(list)\n        self._populating = False\n        self._bdgest_album_results = []\n        self._bdgest_series_results = []  # New: store series search results\n        self._original_cover_pixmap = None  # Store original pixmap for rescaling\n        self._build_ui()\n        self.series_cover_url = ",
    "])\n        idx = self.provider_combo.findText(self.default_provider)\n        if idx >= 0:\n            self.provider_combo.setCurrentIndex(idx)\n        self.provider_combo.setCurrentIndex(idx if idx >= 0 else 0)\n\n        self.files = []\n        self._source = self.provider_combo.currentText()\n        self.issues_by_series = defaultdict(list)\n        self._populating = False\n        self._bdgest_album_results = []\n        self._build_ui()\n        self.series_cover_url = ",
    "])\n        self.search_bar = DroppableLineEdit()\n        self.search_btn = QPushButton(",
    "])\n        self.search_bar = DroppableLineEdit()\n        self.search_btn = QPushButton(tr(",
    "]))\n                        return\n                    if new_path.exists():\n                        QMessageBox.critical(self, tr(",
    "]))\n                    return\n                os.rename(str(f[",
    "]}",
    "album manquantes.",
    "exactement comme fetch_albums.",
    "existe pas:\\n{f[",
    "import.",
    "pip install -r requirements.txt",
    "{new_name}",
    "√âtat initial - Authentifi√©: {provider._authenticated}",
    "√âtat initial - Derniers identifiants: {provider._last_credentials}",
    "√âtat initial - Session: {provider._session}",
    "‚è∞ D√©but: {datetime.now().strftime(",
    "‚è±Ô∏è  Dur√©e: {(end_time - start_time).total_seconds():.2f}s",
    "‚ö†Ô∏è  Cl√© ComicVine manquante (optionnel pour BDGest seulement)",
    "‚ö†Ô∏è  Fichier .env manquant",
    "‚ö†Ô∏è  {var} manquant",
    "‚úÖ .env prot√©g√© dans .gitignore",
    "‚úÖ BDGestProvider cr√©√©",
    "‚úÖ BDGestProvider utilise fetch_details=True par d√©faut",
    "‚úÖ BDGestProvider.search_albums_by_series_id method available",
    "‚úÖ Classes import√©es avec succ√®s",
    "‚úÖ Configuration sauvegard√©e dans .env",
    "‚úÖ Fichier .env trouv√©",
    "‚úÖ Import de get_bdgest_albums_by_series_id r√©ussi",
    "‚úÖ Param√®tre fetch_details pr√©sent",
    "‚úÖ Param√®tre max_workers pr√©sent",
    "‚úÖ Series ID correctly placed in ",
    "‚úÖ Series name correctly placed in ",
    "‚úÖ fetch_details=True par d√©faut",
    "‚úÖ get_bdgest_albums_by_series_id imported successfully",
    "‚úÖ max_workers=4 par d√©faut",
    "‚úÖ {len(albums)} album(s) trouv√©(s) pour la s√©rie ",
    "‚úÖ {len(series_list)} s√©rie(s) trouv√©e(s):",
    "‚úÖ {len(series_results)} s√©rie(s) trouv√©e(s)",
    "‚úÖ {method} disponible",
    "‚úÖ {method}: {description}",
    "‚úÖ {var} configur√©",
    "‚ùå .env non prot√©g√© dans .gitignore",
    "‚ùå .gitignore manquant",
    "‚ùå Aucun ID de s√©rie trouv√© dans les r√©sultats",
    "‚ùå Aucun album trouv√© pour la s√©rie ",
    "‚ùå Aucune s√©rie trouv√©e pour ",
    "‚ùå Aucune s√©rie trouv√©e.",
    "‚ùå BDGestProvider devrait utiliser fetch_details=True par d√©faut",
    "‚ùå BDGestProvider.search_albums_by_series_id method not found",
    "‚ùå Configuration annul√©e.",
    "‚ùå Erreur d",
    "‚ùå Erreur lors de la r√©cup√©ration des identifiants: {e}",
    "‚ùå Erreur lors de la sauvegarde: {e}",
    "‚ùå Erreur lors des tests: {e}",
    "‚ùå Erreur lors du test: {e}",
    "‚ùå Erreur: Nom d",
    "‚ùå Error during testing: {e}",
    "‚ùå Identifiants BDGest manquants.",
    "‚ùå Param√®tre fetch_details manquant",
    "‚ùå Param√®tre max_workers manquant",
    "‚ùå Series ID not found in ",
    "‚ùå Series name not found in ",
    "‚ùå fetch_details devrait √™tre True par d√©faut",
    "‚ùå max_workers devrait √™tre 4 par d√©faut",
    "‚ùå {len(failed_checks)} check(s) failed:",
    "‚ùå {method} manquante",
    "‚ùå {method}: MANQUANT",
    "üéâ All checks passed! ComicsRename is ready to use.",
    "üéâ Configuration de s√©curit√© optimale !",
    "üéâ Configuration termin√©e !",
    "üêç Checking Python version...",
    "üìù Les albums r√©cup√©r√©s auront maintenant un champ ",
    "üìù Veuillez entrer vos identifiants:",
    "üîç ComicsRename Installation Validator",
    "üîç Recherche de s√©ries avec le terme: ",
    "üîç Test 1: Recherche de s√©ries...",
    "üîç Test 2: R√©cup√©ration des albums pour la s√©rie ",
    "üîç Test de la structure des donn√©es d",
    "üîç Testing URL construction...",
    "üîç V√©rification de S√©curit√©",
    "üîê Configuration S√©curis√©e des Identifiants",
    "üîí Permissions s√©curis√©es appliqu√©es",
    "üîß Actions Recommand√©es:",
    "üîß Param√®tres de test:",
    "üî∏ BDGest (www.bedetheque.com)",
    "üî∏ ComicVine (comicvine.gamespot.com)",
    "üß™ Test de gestion de session BDGest",
    "üß™ Test de renommage de dossier par double-clic",
    "üß™ Test de r√©cup√©ration d",
    "üß™ Test de r√©cup√©ration des d√©tails d"
  ],
  "contexts": {
    "  [Series {i}] id={series.get(": [
      {
        "file": "comicVine_scraper_api.py",
        "line": 137
      }
    ],
    "  [Issue {i}] id={issue.get(": [
      {
        "file": "comicVine_scraper_api.py",
        "line": 170
      }
    ],
    "Extract strings from QMessageBox calls": [
      {
        "file": "extract_strings.py",
        "line": 53
      }
    ],
    "\n        strings = set()\n        \n        patterns = [\n            r": [
      {
        "file": "extract_strings.py",
        "line": 53
      }
    ],
    ",\n            r": [
      {
        "file": "extract_strings.py",
        "line": 57
      },
      {
        "file": "extract_strings.py",
        "line": 58
      },
      {
        "file": "extract_strings.py",
        "line": 59
      },
      {
        "file": "extract_strings.py",
        "line": 60
      },
      {
        "file": "extract_strings.py",
        "line": 79
      },
      {
        "file": "extract_strings.py",
        "line": 80
      },
      {
        "file": "extract_strings.py",
        "line": 81
      },
      {
        "file": "extract_strings.py",
        "line": 82
      },
      {
        "file": "extract_strings.py",
        "line": 83
      }
    ],
    ",\n        ]\n        \n        for pattern in patterns:\n            matches = re.finditer(pattern, content, re.MULTILINE)\n            for match in matches:\n                string_val = match.group(1)\n                if self._is_translatable_string(string_val):\n                    strings.add(string_val)\n                    self._add_context(string_val, file_path, self._get_line_number(content, match.start()))\n        \n        return strings\n    \n    def _extract_ui_strings(self, content: str, file_path: str) -> Set[str]:\n        ": [
      {
        "file": "extract_strings.py",
        "line": 84
      }
    ],
    "Extract strings from addItem calls": [
      {
        "file": "extract_strings.py",
        "line": 117
      }
    ],
    "\n        strings = set()\n        \n        pattern = r": [
      {
        "file": "extract_strings.py",
        "line": 117
      }
    ],
    "\n        matches = re.finditer(pattern, content, re.MULTILINE)\n        \n        for match in matches:\n            string_val = match.group(1)\n            if self._is_translatable_string(string_val):\n                strings.add(string_val)\n                self._add_context(string_val, file_path, self._get_line_number(content, match.start()))\n        \n        return strings\n    \n    def _extract_user_messages(self, content: str, file_path: str) -> Set[str]:\n        ": [
      {
        "file": "extract_strings.py",
        "line": 120
      }
    ],
    "\n        ]\n        \n        return any(indicator in line_content for indicator in ui_indicators)\n    \n    def _get_line_number(self, content: str, position: int) -> int:\n        ": [
      {
        "file": "extract_strings.py",
        "line": 183
      }
    ],
    " in str(ctx):\n                notes.append(": [
      {
        "file": "extract_strings.py",
        "line": 258
      },
      {
        "file": "extract_strings.py",
        "line": 260
      },
      {
        "file": "extract_strings.py",
        "line": 262
      }
    ],
    "Extracting from: {file_path}": [
      {
        "file": "extract_strings.py",
        "line": 22
      }
    ],
    "Error processing {file_path}: {e}": [
      {
        "file": "extract_strings.py",
        "line": 49
      }
    ],
    "Translation template saved to: {output_file}": [
      {
        "file": "extract_strings.py",
        "line": 250
      }
    ],
    "ComicsRename String Extraction Tool": [
      {
        "file": "extract_strings.py",
        "line": 276
      }
    ],
    "Scanning directory: {script_dir}": [
      {
        "file": "extract_strings.py",
        "line": 286
      }
    ],
    "\\nüìä Extraction Results:": [
      {
        "file": "extract_strings.py",
        "line": 289
      }
    ],
    "   Files processed: {results[": [
      {
        "file": "extract_strings.py",
        "line": 290
      }
    ],
    "   Strings found: {results[": [
      {
        "file": "extract_strings.py",
        "line": 291
      }
    ],
    "\\nüìÅ Output files created in: {output_dir}": [
      {
        "file": "extract_strings.py",
        "line": 314
      }
    ],
    "   ‚Ä¢ extracted_strings.json    - Complete extraction data": [
      {
        "file": "extract_strings.py",
        "line": 315
      }
    ],
    "   ‚Ä¢ translation_template.json - Template for translators": [
      {
        "file": "extract_strings.py",
        "line": 316
      }
    ],
    "   ‚Ä¢ strings_list.txt         - Simple list for reference": [
      {
        "file": "extract_strings.py",
        "line": 317
      }
    ],
    "\\nüéØ Top 10 strings to translate:": [
      {
        "file": "extract_strings.py",
        "line": 319
      }
    ],
    "   {i:2d}. {string_val}": [
      {
        "file": "extract_strings.py",
        "line": 321
      }
    ],
    "   ... and {len(results[": [
      {
        "file": "extract_strings.py",
        "line": 324
      }
    ],
    "‚ùå Aucune s√©rie trouv√©e.": [
      {
        "file": "test_bdgest_series.py",
        "line": 61
      }
    ],
    "‚úÖ {len(series_list)} s√©rie(s) trouv√©e(s):": [
      {
        "file": "test_bdgest_series.py",
        "line": 64
      }
    ],
    "\\nüìö S√©rie #{i}": [
      {
        "file": "test_bdgest_series.py",
        "line": 68
      }
    ],
    "Nom: {series[": [
      {
        "file": "test_bdgest_series.py",
        "line": 73
      }
    ],
    "Pays: {series[": [
      {
        "file": "test_bdgest_series.py",
        "line": 76
      }
    ],
    "Couverture: {series[": [
      {
        "file": "test_bdgest_series.py",
        "line": 79
      }
    ],
    "URL: {series[": [
      {
        "file": "test_bdgest_series.py",
        "line": 82
      }
    ],
    "\\nD√©tails complets:": [
      {
        "file": "test_bdgest_series.py",
        "line": 86
      }
    ],
    "  {key}: {": [
      {
        "file": "test_bdgest_series.py",
        "line": 90
      }
    ],
    "  {key}: {value}": [
      {
        "file": "test_bdgest_series.py",
        "line": 92
      }
    ],
    "‚ùå Erreur: Nom d": [
      {
        "file": "test_bdgest_series.py",
        "line": 166
      },
      {
        "file": "test_series_albums.py",
        "line": 25
      }
    ],
    "   Utilisez -u/-p ou cr√©ez un fichier .env avec:": [
      {
        "file": "test_bdgest_series.py",
        "line": 167
      }
    ],
    "   BDGEST_USERNAME=votre_nom_utilisateur": [
      {
        "file": "test_bdgest_series.py",
        "line": 168
      },
      {
        "file": "test_series_albums.py",
        "line": 28
      }
    ],
    "   BDGEST_PASSWORD=votre_mot_de_passe": [
      {
        "file": "test_bdgest_series.py",
        "line": 169
      },
      {
        "file": "test_series_albums.py",
        "line": 29
      }
    ],
    "üîß Param√®tres de test:": [
      {
        "file": "test_bdgest_series.py",
        "line": 174
      }
    ],
    "   Terme de recherche: ": [
      {
        "file": "test_bdgest_series.py",
        "line": 175
      }
    ],
    "   Utilisateur: {username}": [
      {
        "file": "test_bdgest_series.py",
        "line": 176
      }
    ],
    "   Mode debug: {debug_mode}": [
      {
        "file": "test_bdgest_series.py",
        "line": 177
      }
    ],
    "   Mode verbose: {args.verbose}": [
      {
        "file": "test_bdgest_series.py",
        "line": 178
      }
    ],
    "   Fichier de log: {args.log_file}": [
      {
        "file": "test_bdgest_series.py",
        "line": 180
      }
    ],
    "üîç Recherche de s√©ries avec le terme: ": [
      {
        "file": "test_bdgest_series.py",
        "line": 187
      }
    ],
    "‚è∞ D√©but: {datetime.now().strftime(": [
      {
        "file": "test_bdgest_series.py",
        "line": 188
      }
    ],
    "‚è±Ô∏è  Dur√©e: {(end_time - start_time).total_seconds():.2f}s": [
      {
        "file": "test_bdgest_series.py",
        "line": 203
      }
    ],
    "\\n‚úÖ Test termin√© avec succ√®s!": [
      {
        "file": "test_bdgest_series.py",
        "line": 212
      }
    ],
    "‚ùå Erreur d": [
      {
        "file": "test_bdgest_series.py",
        "line": 215
      }
    ],
    "   Assurez-vous que bdgest_scraper_api.py est dans le m√™me r√©pertoire.": [
      {
        "file": "test_bdgest_series.py",
        "line": 216
      }
    ],
    "‚ùå Erreur lors du test: {e}": [
      {
        "file": "test_bdgest_series.py",
        "line": 220
      },
      {
        "file": "test_folder_rename.py",
        "line": 73
      },
      {
        "file": "test_album_details.py",
        "line": 81
      },
      {
        "file": "test_session_management.py",
        "line": 70
      }
    ],
    "üß™ Test de renommage de dossier par double-clic": [
      {
        "file": "test_folder_rename.py",
        "line": 15
      }
    ],
    "‚úÖ Classes import√©es avec succ√®s": [
      {
        "file": "test_folder_rename.py",
        "line": 21
      }
    ],
    "\\nüîç Fonctionnalit√©s d": [
      {
        "file": "test_folder_rename.py",
        "line": 24
      }
    ],
    "‚úÖ {method}: {description}": [
      {
        "file": "test_folder_rename.py",
        "line": 36
      }
    ],
    "‚ùå {method}: MANQUANT": [
      {
        "file": "test_folder_rename.py",
        "line": 38
      }
    ],
    "\\nüìã Workflow complet:": [
      {
        "file": "test_folder_rename.py",
        "line": 40
      }
    ],
    "   1. üñ±Ô∏è  Double-clic sur le nom du dossier": [
      {
        "file": "test_folder_rename.py",
        "line": 41
      }
    ],
    "   2. ‚úèÔ∏è  Passage en mode √©dition (fond jaune, bordure bleue)": [
      {
        "file": "test_folder_rename.py",
        "line": 42
      }
    ],
    "   3. ‚å®Ô∏è  Saisie du nouveau nom du dossier": [
      {
        "file": "test_folder_rename.py",
        "line": 43
      }
    ],
    "   4. ‚úÖ Validation par Entr√©e ou perte de focus": [
      {
        "file": "test_folder_rename.py",
        "line": 44
      }
    ],
    "   5. üîç V√©rification que le nouveau nom est valide": [
      {
        "file": "test_folder_rename.py",
        "line": 45
      }
    ],
    "   6. ‚ùì Demande de confirmation √† l": [
      {
        "file": "test_folder_rename.py",
        "line": 46
      }
    ],
    "   7. üìÅ Renommage effectif du dossier": [
      {
        "file": "test_folder_rename.py",
        "line": 47
      }
    ],
    "   8. üîÑ Rechargement des fichiers dans le nouveau dossier": [
      {
        "file": "test_folder_rename.py",
        "line": 48
      }
    ],
    "   9. üìç Mise √† jour des param√®tres (last_folder)": [
      {
        "file": "test_folder_rename.py",
        "line": 49
      }
    ],
    "  10. üì¢ Message de confirmation": [
      {
        "file": "test_folder_rename.py",
        "line": 50
      }
    ],
    "\\nüõ°Ô∏è Protections impl√©ment√©es:": [
      {
        "file": "test_folder_rename.py",
        "line": 52
      }
    ],
    "   ‚Ä¢ Validation du nom (caract√®res autoris√©s)": [
      {
        "file": "test_folder_rename.py",
        "line": 53
      }
    ],
    "   ‚Ä¢ V√©rification de l": [
      {
        "file": "test_folder_rename.py",
        "line": 54
      }
    ],
    "   ‚Ä¢ Confirmation obligatoire de l": [
      {
        "file": "test_folder_rename.py",
        "line": 55
      }
    ],
    "   ‚Ä¢ Gestion des erreurs (permissions, etc.)": [
      {
        "file": "test_folder_rename.py",
        "line": 56
      }
    ],
    "   ‚Ä¢ Annulation possible avec √âchap": [
      {
        "file": "test_folder_rename.py",
        "line": 57
      }
    ],
    "   ‚Ä¢ Restauration du nom original en cas d": [
      {
        "file": "test_folder_rename.py",
        "line": 58
      }
    ],
    "\\n‚å®Ô∏è Raccourcis clavier:": [
      {
        "file": "test_folder_rename.py",
        "line": 60
      }
    ],
    "   ‚Ä¢ Entr√©e: Valider le nouveau nom": [
      {
        "file": "test_folder_rename.py",
        "line": 61
      }
    ],
    "   ‚Ä¢ √âchap: Annuler et restaurer le nom original": [
      {
        "file": "test_folder_rename.py",
        "line": 62
      }
    ],
    "   ‚Ä¢ Perte de focus: Valider le nouveau nom": [
      {
        "file": "test_folder_rename.py",
        "line": 63
      }
    ],
    "\\nüé® Indicateurs visuels:": [
      {
        "file": "test_folder_rename.py",
        "line": 65
      }
    ],
    "   ‚Ä¢ Mode lecture: Aspect normal": [
      {
        "file": "test_folder_rename.py",
        "line": 66
      }
    ],
    "   ‚Ä¢ Mode √©dition: Fond jaune, bordure bleue": [
      {
        "file": "test_folder_rename.py",
        "line": 67
      }
    ],
    "   ‚Ä¢ S√©lection automatique du texte en mode √©dition": [
      {
        "file": "test_folder_rename.py",
        "line": 68
      }
    ],
    "\\nüéâ Test r√©ussi!": [
      {
        "file": "test_folder_rename.py",
        "line": 82
      },
      {
        "file": "test_session_management.py",
        "line": 79
      }
    ],
    "La fonctionnalit√© de renommage par double-clic est op√©rationnelle.": [
      {
        "file": "test_folder_rename.py",
        "line": 83
      }
    ],
    "\\nüí° Pour tester:": [
      {
        "file": "test_folder_rename.py",
        "line": 84
      }
    ],
    "   1. Lancez l": [
      {
        "file": "test_folder_rename.py",
        "line": 85
      }
    ],
    "   2. Ouvrez un dossier avec des fichiers": [
      {
        "file": "test_folder_rename.py",
        "line": 86
      }
    ],
    "   3. Double-cliquez sur le nom du dossier en haut": [
      {
        "file": "test_folder_rename.py",
        "line": 87
      }
    ],
    "   4. Modifiez le nom et appuyez sur Entr√©e": [
      {
        "file": "test_folder_rename.py",
        "line": 88
      }
    ],
    "\\n‚ùå Test √©chou√©.": [
      {
        "file": "test_folder_rename.py",
        "line": 90
      },
      {
        "file": "test_session_management.py",
        "line": 82
      }
    ],
    "üêç Checking Python version...": [
      {
        "file": "validate_install.py",
        "line": 16
      }
    ],
    "   ‚úÖ Python {version.major}.{version.minor}.{version.micro} (OK)": [
      {
        "file": "validate_install.py",
        "line": 19
      }
    ],
    "   ‚ùå Python {version.major}.{version.minor}.{version.micro} (Required: 3.8+)": [
      {
        "file": "validate_install.py",
        "line": 22
      }
    ],
    "\\nüì¶ Checking dependencies...": [
      {
        "file": "validate_install.py",
        "line": 27
      }
    ],
    "   ‚úÖ {package_name}: {version}": [
      {
        "file": "validate_install.py",
        "line": 42
      }
    ],
    "   ‚ùå {package_name}: Not installed": [
      {
        "file": "validate_install.py",
        "line": 44
      }
    ],
    "\\nüìÅ Checking project files...": [
      {
        "file": "validate_install.py",
        "line": 51
      }
    ],
    "   ‚úÖ {file_name}": [
      {
        "file": "validate_install.py",
        "line": 66
      }
    ],
    "   ‚ùå {file_name}: Missing": [
      {
        "file": "validate_install.py",
        "line": 68
      }
    ],
    "\\nüîß Testing module imports...": [
      {
        "file": "validate_install.py",
        "line": 75
      }
    ],
    "   ‚úÖ {module_name}: {description}": [
      {
        "file": "validate_install.py",
        "line": 88
      }
    ],
    "   ‚úÖ ComicRenamer class found": [
      {
        "file": "validate_install.py",
        "line": 93
      }
    ],
    "   ‚ùå ComicRenamer class not found": [
      {
        "file": "validate_install.py",
        "line": 95
      }
    ],
    "   ‚ùå {module_name}: {description} - {e}": [
      {
        "file": "validate_install.py",
        "line": 99
      }
    ],
    "\\n‚öôÔ∏è  Checking configuration...": [
      {
        "file": "validate_install.py",
        "line": 106
      }
    ],
    "   ‚úÖ .env file exists": [
      {
        "file": "validate_install.py",
        "line": 112
      }
    ],
    "   ‚úÖ .env file has content": [
      {
        "file": "validate_install.py",
        "line": 119
      }
    ],
    "   ‚ö†Ô∏è  .env file is empty": [
      {
        "file": "validate_install.py",
        "line": 121
      }
    ],
    "   ‚ùå Error reading .env file: {e}": [
      {
        "file": "validate_install.py",
        "line": 123
      }
    ],
    "   ‚ö†Ô∏è  .env file not found (optional)": [
      {
        "file": "validate_install.py",
        "line": 126
      }
    ],
    "   ‚úÖ .env.example template exists": [
      {
        "file": "validate_install.py",
        "line": 130
      }
    ],
    "   ‚ùå .env.example template missing": [
      {
        "file": "validate_install.py",
        "line": 132
      }
    ],
    "   ‚úÖ setup_credentials.py exists": [
      {
        "file": "validate_install.py",
        "line": 137
      }
    ],
    "   ‚ùå setup_credentials.py missing": [
      {
        "file": "validate_install.py",
        "line": 139
      }
    ],
    "\\nüñ•Ô∏è  Checking GUI availability...": [
      {
        "file": "validate_install.py",
        "line": 146
      }
    ],
    "   ‚úÖ PySide6 GUI components available": [
      {
        "file": "validate_install.py",
        "line": 158
      }
    ],
    "   ‚ùå GUI components unavailable: {e}": [
      {
        "file": "validate_install.py",
        "line": 162
      }
    ],
    "üîç ComicsRename Installation Validator": [
      {
        "file": "validate_install.py",
        "line": 167
      }
    ],
    "üéâ All checks passed! ComicsRename is ready to use.": [
      {
        "file": "validate_install.py",
        "line": 189
      }
    ],
    "\\nTo start the application, run:": [
      {
        "file": "validate_install.py",
        "line": 190
      }
    ],
    "   python main.py": [
      {
        "file": "validate_install.py",
        "line": 191
      }
    ],
    "\\nOr use the launcher scripts:": [
      {
        "file": "validate_install.py",
        "line": 192
      }
    ],
    "   ./launch.sh       (macOS/Linux)": [
      {
        "file": "validate_install.py",
        "line": 193
      }
    ],
    "‚ùå {len(failed_checks)} check(s) failed:": [
      {
        "file": "validate_install.py",
        "line": 196
      }
    ],
    "   ‚Ä¢ {failed}": [
      {
        "file": "validate_install.py",
        "line": 198
      }
    ],
    "\\nPlease fix the issues above.": [
      {
        "file": "validate_install.py",
        "line": 199
      }
    ],
    "\\nFor installation help, see:": [
      {
        "file": "validate_install.py",
        "line": 200
      }
    ],
    "\\nüí° If dependencies are missing, try:": [
      {
        "file": "validate_install.py",
        "line": 205
      },
      {
        "file": "validate_install.py",
        "line": 208
      }
    ],
    "   pip install PySide6 requests beautifulsoup4 lxml python-dotenv": [
      {
        "file": "validate_install.py",
        "line": 206
      }
    ],
    "   pip install -r requirements.txt": [
      {
        "file": "validate_install.py",
        "line": 209
      }
    ],
    "üîç Test de la structure des donn√©es d": [
      {
        "file": "test_album_details.py",
        "line": 15
      }
    ],
    "‚úÖ Import de get_bdgest_albums_by_series_id r√©ussi": [
      {
        "file": "test_album_details.py",
        "line": 21
      }
    ],
    "Param√®tres de get_bdgest_albums_by_series_id: {params}": [
      {
        "file": "test_album_details.py",
        "line": 28
      }
    ],
    "‚úÖ Param√®tre fetch_details pr√©sent": [
      {
        "file": "test_album_details.py",
        "line": 31
      }
    ],
    "‚ùå Param√®tre fetch_details manquant": [
      {
        "file": "test_album_details.py",
        "line": 33
      }
    ],
    "‚úÖ Param√®tre max_workers pr√©sent": [
      {
        "file": "test_album_details.py",
        "line": 37
      }
    ],
    "‚ùå Param√®tre max_workers manquant": [
      {
        "file": "test_album_details.py",
        "line": 39
      }
    ],
    "Valeur par d√©faut fetch_details: {default_fetch_details}": [
      {
        "file": "test_album_details.py",
        "line": 46
      }
    ],
    "Valeur par d√©faut max_workers: {default_max_workers}": [
      {
        "file": "test_album_details.py",
        "line": 47
      }
    ],
    "‚úÖ fetch_details=True par d√©faut": [
      {
        "file": "test_album_details.py",
        "line": 50
      }
    ],
    "‚ùå fetch_details devrait √™tre True par d√©faut": [
      {
        "file": "test_album_details.py",
        "line": 52
      }
    ],
    "‚úÖ max_workers=4 par d√©faut": [
      {
        "file": "test_album_details.py",
        "line": 55
      }
    ],
    "‚ùå max_workers devrait √™tre 4 par d√©faut": [
      {
        "file": "test_album_details.py",
        "line": 57
      }
    ],
    "Param√®tres de BDGestProvider.search_albums_by_series_id: {provider_params}": [
      {
        "file": "test_album_details.py",
        "line": 66
      }
    ],
    "Valeur par d√©faut fetch_details dans provider: {provider_default}": [
      {
        "file": "test_album_details.py",
        "line": 70
      }
    ],
    "‚úÖ BDGestProvider utilise fetch_details=True par d√©faut": [
      {
        "file": "test_album_details.py",
        "line": 72
      }
    ],
    "‚ùå BDGestProvider devrait utiliser fetch_details=True par d√©faut": [
      {
        "file": "test_album_details.py",
        "line": 74
      }
    ],
    "\\n‚úÖ Structure des fonctions correcte !": [
      {
        "file": "test_album_details.py",
        "line": 76
      }
    ],
    "üìù Les albums r√©cup√©r√©s auront maintenant un champ ": [
      {
        "file": "test_album_details.py",
        "line": 77
      }
    ],
    "üß™ Test de r√©cup√©ration des d√©tails d": [
      {
        "file": "test_album_details.py",
        "line": 87
      }
    ],
    "\\nüéâ Tous les tests r√©ussis !": [
      {
        "file": "test_album_details.py",
        "line": 93
      }
    ],
    "La fonction fetch_albums_by_series_id r√©cup√®re maintenant les d√©tails des albums": [
      {
        "file": "test_album_details.py",
        "line": 94
      }
    ],
    "exactement comme fetch_albums.": [
      {
        "file": "test_album_details.py",
        "line": 95
      }
    ],
    "\\n‚ùå Certains tests ont √©chou√©.": [
      {
        "file": "test_album_details.py",
        "line": 97
      }
    ],
    "üîê Configuration S√©curis√©e des Identifiants": [
      {
        "file": "setup_credentials.py",
        "line": 14
      }
    ],
    "‚ùå Configuration annul√©e.": [
      {
        "file": "setup_credentials.py",
        "line": 23
      }
    ],
    "üìù Veuillez entrer vos identifiants:": [
      {
        "file": "setup_credentials.py",
        "line": 26
      }
    ],
    "   (Ils seront stock√©s dans .env, prot√©g√© par .gitignore)": [
      {
        "file": "setup_credentials.py",
        "line": 27
      }
    ],
    "üî∏ BDGest (www.bedetheque.com)": [
      {
        "file": "setup_credentials.py",
        "line": 31
      }
    ],
    "üî∏ ComicVine (comicvine.gamespot.com)": [
      {
        "file": "setup_credentials.py",
        "line": 37
      }
    ],
    "   (Allez dans votre profil ‚Üí API pour g√©n√©rer une cl√©)": [
      {
        "file": "setup_credentials.py",
        "line": 38
      }
    ],
    "‚ùå Identifiants BDGest manquants.": [
      {
        "file": "setup_credentials.py",
        "line": 44
      }
    ],
    "‚ö†Ô∏è  Cl√© ComicVine manquante (optionnel pour BDGest seulement)": [
      {
        "file": "setup_credentials.py",
        "line": 48
      }
    ],
    "‚úÖ Configuration sauvegard√©e dans .env": [
      {
        "file": "setup_credentials.py",
        "line": 67
      }
    ],
    "üîí Permissions s√©curis√©es appliqu√©es": [
      {
        "file": "setup_credentials.py",
        "line": 68
      }
    ],
    "üéâ Configuration termin√©e !": [
      {
        "file": "setup_credentials.py",
        "line": 70
      }
    ],
    "   Vous pouvez maintenant utiliser ComicsRename en toute s√©curit√©.": [
      {
        "file": "setup_credentials.py",
        "line": 71
      }
    ],
    "‚ùå Erreur lors de la sauvegarde: {e}": [
      {
        "file": "setup_credentials.py",
        "line": 74
      }
    ],
    "üîç V√©rification de S√©curit√©": [
      {
        "file": "setup_credentials.py",
        "line": 79
      }
    ],
    "‚úÖ Fichier .env trouv√©": [
      {
        "file": "setup_credentials.py",
        "line": 86
      }
    ],
    "‚ö†Ô∏è  Fichier .env manquant": [
      {
        "file": "setup_credentials.py",
        "line": 88
      }
    ],
    "‚úÖ .env prot√©g√© dans .gitignore": [
      {
        "file": "setup_credentials.py",
        "line": 96
      }
    ],
    "‚ùå .env non prot√©g√© dans .gitignore": [
      {
        "file": "setup_credentials.py",
        "line": 98
      }
    ],
    "‚ùå .gitignore manquant": [
      {
        "file": "setup_credentials.py",
        "line": 101
      }
    ],
    "‚úÖ {var} configur√©": [
      {
        "file": "setup_credentials.py",
        "line": 108
      }
    ],
    "‚ö†Ô∏è  {var} manquant": [
      {
        "file": "setup_credentials.py",
        "line": 110
      }
    ],
    "üîß Actions Recommand√©es:": [
      {
        "file": "setup_credentials.py",
        "line": 114
      }
    ],
    "   {i}. {issue}": [
      {
        "file": "setup_credentials.py",
        "line": 116
      }
    ],
    "üéâ Configuration de s√©curit√© optimale !": [
      {
        "file": "setup_credentials.py",
        "line": 119
      }
    ],
    "üß™ Test de gestion de session BDGest": [
      {
        "file": "test_session_management.py",
        "line": 15
      }
    ],
    "‚úÖ BDGestProvider cr√©√©": [
      {
        "file": "test_session_management.py",
        "line": 23
      }
    ],
    "√âtat initial - Session: {provider._session}": [
      {
        "file": "test_session_management.py",
        "line": 26
      }
    ],
    "√âtat initial - Authentifi√©: {provider._authenticated}": [
      {
        "file": "test_session_management.py",
        "line": 27
      }
    ],
    "√âtat initial - Derniers identifiants: {provider._last_credentials}": [
      {
        "file": "test_session_management.py",
        "line": 28
      }
    ],
    "\\nüîç Test des m√©thodes de gestion de session:": [
      {
        "file": "test_session_management.py",
        "line": 31
      }
    ],
    "‚úÖ {method} disponible": [
      {
        "file": "test_session_management.py",
        "line": 41
      }
    ],
    "‚ùå {method} manquante": [
      {
        "file": "test_session_management.py",
        "line": 43
      }
    ],
    "\\nüîë Test de r√©cup√©ration des identifiants:": [
      {
        "file": "test_session_management.py",
        "line": 46
      }
    ],
    "Utilisateur configur√©: {": [
      {
        "file": "test_session_management.py",
        "line": 49
      }
    ],
    "Mot de passe configur√©: {": [
      {
        "file": "test_session_management.py",
        "line": 50
      }
    ],
    "‚ùå Erreur lors de la r√©cup√©ration des identifiants: {e}": [
      {
        "file": "test_session_management.py",
        "line": 52
      }
    ],
    "\\nüìã Avantages de la nouvelle impl√©mentation:": [
      {
        "file": "test_session_management.py",
        "line": 54
      }
    ],
    "   ‚Ä¢ Session persistante entre les recherches": [
      {
        "file": "test_session_management.py",
        "line": 55
      }
    ],
    "   ‚Ä¢ Authentification uniquement quand n√©cessaire": [
      {
        "file": "test_session_management.py",
        "line": 56
      }
    ],
    "   ‚Ä¢ R√©utilisation des cookies et tokens": [
      {
        "file": "test_session_management.py",
        "line": 57
      }
    ],
    "   ‚Ä¢ Performance am√©lior√©e pour les recherches multiples": [
      {
        "file": "test_session_management.py",
        "line": 58
      }
    ],
    "   ‚Ä¢ Gestion automatique des erreurs d": [
      {
        "file": "test_session_management.py",
        "line": 59
      }
    ],
    "\\nüîÑ Comportement:": [
      {
        "file": "test_session_management.py",
        "line": 61
      }
    ],
    "   1. Premi√®re recherche: Cr√©ation session + authentification": [
      {
        "file": "test_session_management.py",
        "line": 62
      }
    ],
    "   2. Recherches suivantes: R√©utilisation de la session existante": [
      {
        "file": "test_session_management.py",
        "line": 63
      }
    ],
    "   3. En cas d": [
      {
        "file": "test_session_management.py",
        "line": 64
      }
    ],
    "   4. Changement d": [
      {
        "file": "test_session_management.py",
        "line": 65
      }
    ],
    "Le syst√®me de gestion de session est op√©rationnel.": [
      {
        "file": "test_session_management.py",
        "line": 80
      }
    ],
    "Rename": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 155
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 241
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 783
      }
    ],
    "Erreur": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 164
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 167
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 195
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 201
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 224
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 781
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 786
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 820
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 831
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 848
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 875
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 892
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 195
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 820
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 831
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 848
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 167
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 201
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 875
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 892
      }
    ],
    "Rename Error": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 172
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 252
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 791
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 172
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 791
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 431
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 431
      }
    ],
    "Format non support√©": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 187
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 187
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 187
      }
    ],
    "Ajouter des fichiers": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 191
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 191
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 370
      }
    ],
    "Avertissement": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 218
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 397
      }
    ],
    "Error": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 268
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 273
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 747
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 747
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 449
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 454
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1194
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1194
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 449
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 454
      }
    ],
    "No Results": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 607
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 607
      }
    ],
    "R√©sultat": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 623
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 623
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 913
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 913
      }
    ],
    "Aucun r√©sultat": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 642
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 642
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 936
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 969
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 936
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 969
      }
    ],
    "Selection": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 741
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 741
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1188
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1188
      }
    ],
    "S√©lection": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 826
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 826
      }
    ],
    "Info": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 866
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 866
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 866
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1316
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1316
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1316
      }
    ],
    "Renommer le dossier": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 878
      }
    ],
    "Succ√®s": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 889
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 889
      }
    ],
    "Seuls les fichiers PDF, EPUB, CBZ ou CBR sont accept√©s.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 187
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 187
      }
    ],
    "Aucun dossier actif pour l": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 195
      }
    ],
    "No albums found for this search.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 607
      }
    ],
    "Aucun album trouv√© pour cette recherche.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 623
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 913
      }
    ],
    "Aucun album trouv√© pour cette recherche sur BDGest.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 642
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 969
      }
    ],
    "Please select one file and one album": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 741
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1188
      }
    ],
    "Album metadata missing": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 747
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1194
      }
    ],
    "Aucun fichier dans le dossier.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 820
      }
    ],
    "Veuillez s√©lectionner un album dans la liste.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 826
      }
    ],
    "M√©tadonn√©es de l": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 831
      }
    ],
    "Impossible de d√©terminer le nom de la s√©rie.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 848
      }
    ],
    "Le dossier porte d√©j√† ce nom.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 866
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 866
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1316
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1316
      }
    ],
    "O√π souhaitez-vous commencer la navigation ?": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 526
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 526
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 526
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 809
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 809
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 809
      }
    ],
    "Param√®tres": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 314
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 314
      }
    ],
    "Comic Renamer - Multi-Source": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 362
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 362
      }
    ],
    "S√©lection du dossier": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 525
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 525
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 525
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 808
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 808
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 808
      }
    ],
    "Disques externes (/Volumes)": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 527
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 527
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 810
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 810
      }
    ],
    "Dernier dossier utilis√©": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 528
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 528
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 811
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 811
      }
    ],
    "Dossier personnel": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 529
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 529
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 812
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 812
      }
    ],
    "Application Settings": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 404
      }
    ],
    "Renommer le dossier avec le nom de la s√©rie s√©lectionn√©e": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 420
      }
    ],
    ", f": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 164
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 268
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 273
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 781
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 786
      }
    ],
    "existe pas:\\n{f[": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 164
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 786
      }
    ],
    "]}": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 164
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 786
      }
    ],
    "Un fichier nomm√© ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 167
      }
    ],
    " existe d√©j√† dans ce dossier.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 167
      }
    ],
    "import.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 195
      }
    ],
    "Le fichier source n": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 201
      }
    ],
    ")\n                    continue\n                # Nettoie le nom du fichier (enl√®ve les caract√®res interdits)\n                base_name = os.path.basename(src).replace(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 201
      }
    ],
    ", str(e))\n\n    def _show_context_menu(self, pos):\n        row = self.rowAt(pos.y())\n        if row < 0:\n            return\n        menu = QMenu(self)\n        open_action = menu.addAction(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 252
      }
    ],
    ")\n        elif action == reveal_action:\n            try:\n                subprocess.Popen([": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 268
      }
    ],
    ")\n\nclass AlbumTable(QTableWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.main = parent\n        self.setSelectionBehavior(QAbstractItemView.SelectRows)\n        self.setDragEnabled(True)\n        self.setColumnCount(1)\n        self.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)\n        self.setEditTriggers(QAbstractItemView.NoEditTriggers)\n        self.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.customContextMenuRequested.connect(self._show_context_menu)\n\n    def mouseMoveEvent(self, event):\n        it = self.itemAt(event.pos())\n        if not it:\n            return\n        print(f": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 273
      }
    ],
    ")\n        self.layout = QFormLayout(self)\n\n        self.settings = settings or QSettings(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 314
      }
    ],
    "])\n        default_provider = self.settings.value(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 320
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 515
      }
    ],
    ")\n        self.resize(1400, 800)\n        self.settings = QSettings(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 362
      }
    ],
    "])\n        idx = self.provider_combo.findText(self.default_provider)\n        if idx >= 0:\n            self.provider_combo.setCurrentIndex(idx)\n        self.provider_combo.setCurrentIndex(idx if idx >= 0 else 0)\n\n        self.files = []\n        self._source = self.provider_combo.currentText()\n        self.issues_by_series = defaultdict(list)\n        self._populating = False\n        self._bdgest_album_results = []\n        self._build_ui()\n        self.series_cover_url = ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 367
      }
    ],
    "])\n        self.search_bar = DroppableLineEdit()\n        self.search_btn = QPushButton(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 397
      }
    ],
    ")\n        self.dir_btn = QPushButton(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 399
      }
    ],
    ")\n        self.recursive_cb = QCheckBox(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 400
      }
    ],
    ")\n        self.settings_btn.setFixedWidth(30)\n        self.settings_btn.setToolTip(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 402
      }
    ],
    ")\n        self.rename_btn = QPushButton(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 404
      }
    ],
    ")\n        for w in (self.source_combo, self.search_bar, self.search_btn, self.dir_btn, self.recursive_cb, self.settings_btn):\n            ctrl.addWidget(w)\n        layout.addLayout(ctrl)\n\n        splitter_main = QSplitter(Qt.Horizontal)\n\n        # --- Folder display ---\n        file_panel = QWidget()\n        file_panel_layout = QVBoxLayout(file_panel)\n        file_panel_layout.setContentsMargins(0, 0, 0, 0)\n        folder_display_layout = QHBoxLayout()\n        self.folder_display = DraggableLineEdit()\n        # Add the rename folder button\n        self.folder_rename_btn = QPushButton(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 405
      }
    ],
    ")\n        self.folder_rename_btn.setToolTip(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 419
      }
    ],
    ")\n        self.folder_rename_btn.setFixedWidth(30)\n        self.folder_rename_btn.setEnabled(False)  # Disabled by default\n        self.folder_rename_btn.clicked.connect(self._rename_folder_to_serie)\n        folder_display_layout.addWidget(self.folder_display)\n        folder_display_layout.addWidget(self.folder_rename_btn)\n        file_panel_layout.addLayout(folder_display_layout)\n        self.file_table = FileTable(self)\n        self.file_table.setColumnCount(4)\n        self.file_table.setHorizontalHeaderLabels([": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 420
      }
    ],
    "/\\\\": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 568
      },
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 812
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 851
      }
    ],
    ")\n                    return\n                for s in sorted(self.issues_by_series):\n                    self.series_combo.addItem(f": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 607
      }
    ],
    ")\n            else:\n                print(f": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 610
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 900
      }
    ],
    ")\n                self.issues_by_series = issues_by_series\n                if not issues_by_series:\n                    QMessageBox.warning(self, ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 620
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 910
      }
    ],
    ")\n        else:\n            albums = []\n            for album in series_list:\n                s = album.get(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 623
      }
    ],
    ")\n\n    def _enable_folder_rename_btn(self, *args):\n        self.folder_rename_btn.setEnabled(True)\n\n    def _on_album_selection_changed(self, selected, deselected):\n        # Enable if any row is selected, else disable\n        selected_rows = self.album_table.selectionModel().selectedRows()\n        self.folder_rename_btn.setEnabled(bool(selected_rows))\n\n    def _populate_albums(self, txt):\n        if not txt:\n            return\n        self.album_table.clearContents()\n        self.album_table.setRowCount(0)\n        self.series_cover_url = ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 642
      }
    ],
    ")\n            return\n        f = self.files[fr]\n        itm = self.album_table.item(ar, 0)\n        meta = itm.data(Qt.UserRole) if itm else None\n        if not meta:\n            QMessageBox.critical(self, ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 741
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1188
      }
    ],
    ")\n            return\n        # Build new filename\n        series = meta.get(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 747
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1194
      }
    ],
    "{new_name}": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 781
      }
    ],
    ")\n            return\n        if QMessageBox.question(self, ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 781
      }
    ],
    ", msg, QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes:\n            try:\n                if not os.path.exists(str(f[": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 783
      }
    ],
    ").rstrip(": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 815
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1265
      }
    ],
    ")))\n\n    def _rename_folder_to_serie(self):\n        # Get current folder path\n        if not self.files:\n            QMessageBox.warning(self, ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 815
      }
    ],
    ")\n            return\n        current_folder = pathlib.Path(self.files[0][": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 820
      }
    ],
    ")\n            return\n        itm = self.album_table.item(ar, 0)\n        meta = itm.data(Qt.UserRole) if itm else None\n        if not meta:\n            QMessageBox.critical(self, ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 826
      }
    ],
    "album manquantes.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 831
      }
    ],
    ")\n            return\n        # Clean up names\n        clean = lambda s: ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 848
      }
    ],
    "Un dossier nomm√© ": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 875
      }
    ],
    " existe d√©j√† dans ce r√©pertoire.": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 875
      }
    ],
    "Dossier renomm√© en :\\n{new_folder_name}": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 889
      }
    ],
    "Erreur lors du renommage du dossier :\\n{e}": [
      {
        "file": "comicsFileRenamer_v2.py",
        "line": 892
      }
    ],
    "Error: Missing dependencies. Please install requirements:": [
      {
        "file": "main.py",
        "line": 47
      }
    ],
    "pip install -r requirements.txt": [
      {
        "file": "main.py",
        "line": 48
      }
    ],
    "Details: {e}": [
      {
        "file": "main.py",
        "line": 49
      }
    ],
    "Error starting application: {e}": [
      {
        "file": "main.py",
        "line": 52
      }
    ],
    "üîç Testing URL construction...": [
      {
        "file": "test_url_construction.py",
        "line": 10
      }
    ],
    "Series ID: {series_id}": [
      {
        "file": "test_url_construction.py",
        "line": 20
      }
    ],
    "Series Name: {series_name}": [
      {
        "file": "test_url_construction.py",
        "line": 21
      }
    ],
    "Encoded Name: {encoded_series_name}": [
      {
        "file": "test_url_construction.py",
        "line": 22
      }
    ],
    "Constructed URL: {url}": [
      {
        "file": "test_url_construction.py",
        "line": 23
      }
    ],
    "Expected URL: {expected_url}": [
      {
        "file": "test_url_construction.py",
        "line": 28
      }
    ],
    "‚úÖ Series ID correctly placed in ": [
      {
        "file": "test_url_construction.py",
        "line": 32
      }
    ],
    "‚ùå Series ID not found in ": [
      {
        "file": "test_url_construction.py",
        "line": 34
      }
    ],
    "‚úÖ Series name correctly placed in ": [
      {
        "file": "test_url_construction.py",
        "line": 37
      }
    ],
    "‚ùå Series name not found in ": [
      {
        "file": "test_url_construction.py",
        "line": 39
      }
    ],
    "\\nüîç Testing function availability...": [
      {
        "file": "test_url_construction.py",
        "line": 41
      }
    ],
    "‚úÖ get_bdgest_albums_by_series_id imported successfully": [
      {
        "file": "test_url_construction.py",
        "line": 49
      }
    ],
    "‚úÖ BDGestProvider.search_albums_by_series_id method available": [
      {
        "file": "test_url_construction.py",
        "line": 55
      }
    ],
    "‚ùå BDGestProvider.search_albums_by_series_id method not found": [
      {
        "file": "test_url_construction.py",
        "line": 57
      }
    ],
    "\\n‚úÖ All tests passed!": [
      {
        "file": "test_url_construction.py",
        "line": 59
      }
    ],
    "‚ùå Error during testing: {e}": [
      {
        "file": "test_url_construction.py",
        "line": 62
      }
    ],
    "   Utilisez les variables d": [
      {
        "file": "test_series_albums.py",
        "line": 26
      }
    ],
    "   ou cr√©ez un fichier .env avec:": [
      {
        "file": "test_series_albums.py",
        "line": 27
      }
    ],
    "üîç Test 1: Recherche de s√©ries...": [
      {
        "file": "test_series_albums.py",
        "line": 34
      }
    ],
    "‚ùå Aucune s√©rie trouv√©e pour ": [
      {
        "file": "test_series_albums.py",
        "line": 40
      }
    ],
    "‚úÖ {len(series_results)} s√©rie(s) trouv√©e(s)": [
      {
        "file": "test_series_albums.py",
        "line": 43
      }
    ],
    "‚ùå Aucun ID de s√©rie trouv√© dans les r√©sultats": [
      {
        "file": "test_series_albums.py",
        "line": 51
      }
    ],
    "   Donn√©es de la s√©rie: {first_series}": [
      {
        "file": "test_series_albums.py",
        "line": 52
      }
    ],
    "üîç Test 2: R√©cup√©ration des albums pour la s√©rie ": [
      {
        "file": "test_series_albums.py",
        "line": 55
      }
    ],
    "‚ùå Aucun album trouv√© pour la s√©rie ": [
      {
        "file": "test_series_albums.py",
        "line": 62
      }
    ],
    "‚úÖ {len(albums)} album(s) trouv√©(s) pour la s√©rie ": [
      {
        "file": "test_series_albums.py",
        "line": 65
      }
    ],
    "\\nüìö Albums trouv√©s:": [
      {
        "file": "test_series_albums.py",
        "line": 68
      }
    ],
    "   {i+1}. {album_name} (#{album_number}) - {album_date}": [
      {
        "file": "test_series_albums.py",
        "line": 73
      }
    ],
    "   ... et {len(albums) - 3} autres albums": [
      {
        "file": "test_series_albums.py",
        "line": 76
      }
    ],
    "\\n‚úÖ Tests r√©ussis! La fonctionnalit√© de r√©cup√©ration d": [
      {
        "file": "test_series_albums.py",
        "line": 78
      }
    ],
    "‚ùå Erreur lors des tests: {e}": [
      {
        "file": "test_series_albums.py",
        "line": 82
      }
    ],
    "üß™ Test de r√©cup√©ration d": [
      {
        "file": "test_series_albums.py",
        "line": 93
      }
    ],
    "Language Change": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 553
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 553
      }
    ],
    "Language will be applied after restarting the application.": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 553
      }
    ],
    "Aucune s√©rie trouv√©e pour cette recherche sur BDGest.": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 936
      }
    ],
    "), tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 343
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 346
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 366
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 374
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 380
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 897
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1226
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1228
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1231
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1270
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1276
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1281
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1298
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1481
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1488
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1511
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1514
      }
    ],
    ", path=f[": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 343
      },
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1231
      }
    ],
    "]))\n                        return\n                    if new_path.exists():\n                        QMessageBox.critical(self, tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 343
      }
    ],
    ", name=new_name))\n                        return\n                    os.rename(f[": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 346
      }
    ],
    "), str(e))\n            return\n\n        # External file drop (from Finder, etc.)\n        if event.mimeData().hasUrls():\n            urls = event.mimeData().urls()\n            supported_exts = (": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 351
      }
    ],
    "))\n                return\n            op = ": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 366
      }
    ],
    ", msg, QMessageBox.Yes | QMessageBox.No) != QMessageBox.Yes:\n                return\n            dest_folder = self.main.files[0][": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 370
      }
    ],
    "))\n                return\n            import shutil\n            for src in files_to_add:\n                # V√©rifie que le fichier existe\n                if not os.path.exists(src):\n                    QMessageBox.critical(self, tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 374
      }
    ],
    ", path=src))\n                    continue\n                # Nettoie le nom du fichier (enl√®ve les caract√®res interdits)\n                base_name = os.path.basename(src).replace(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 380
      }
    ],
    "Could not open file:\\n{e}": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 449
      }
    ],
    "Could not reveal file:\\n{e}": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 454
      }
    ],
    "))\n        self.layout = QFormLayout(self)\n\n        self.settings = settings or QSettings(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 497
      }
    ],
    "))\n        self.resize(1400, 800)\n        self.settings = QSettings(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 577
      }
    ],
    "])\n        idx = self.provider_combo.findText(self.default_provider)\n        if idx >= 0:\n            self.provider_combo.setCurrentIndex(idx)\n        self.provider_combo.setCurrentIndex(idx if idx >= 0 else 0)\n\n        self.files = []\n        self._source = self.provider_combo.currentText()\n        self.issues_by_series = defaultdict(list)\n        self._populating = False\n        self._bdgest_album_results = []\n        self._bdgest_series_results = []  # New: store series search results\n        self._original_cover_pixmap = None  # Store original pixmap for rescaling\n        self._build_ui()\n        self.series_cover_url = ": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 582
      }
    ],
    "])\n        self.search_bar = DroppableLineEdit()\n        self.search_btn = QPushButton(tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 620
      }
    ],
    "))\n        self.dir_btn = QPushButton(tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 622
      }
    ],
    "))\n        self.recursive_cb = QCheckBox(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 623
      }
    ],
    "))\n        self.series_name_cb.setVisible(False)  # Hidden by default, shown only for BDGest\n        self.settings_btn = QPushButton(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 626
      }
    ],
    ")\n        self.settings_btn.setFixedWidth(30)\n        self.settings_btn.setToolTip(tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 628
      }
    ],
    "))\n        self.rename_btn = QPushButton(tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 630
      }
    ],
    "))\n        for w in (self.source_combo, self.search_bar, self.search_btn, self.dir_btn, self.recursive_cb, self.series_name_cb, self.settings_btn):\n            ctrl.addWidget(w)\n        layout.addLayout(ctrl)\n\n        splitter_main = QSplitter(Qt.Horizontal)\n\n        # --- Folder display ---\n        file_panel = QWidget()\n        file_panel_layout = QVBoxLayout(file_panel)\n        file_panel_layout.setContentsMargins(0, 0, 0, 0)\n        folder_display_layout = QHBoxLayout()\n        self.folder_display = EditableFolderLineEdit(main_window=self)\n        # Add the rename folder button\n        self.folder_rename_btn = QPushButton(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 631
      }
    ],
    ")\n        self.folder_rename_btn.setToolTip(tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 645
      }
    ],
    "))\n        self.folder_rename_btn.setFixedWidth(30)\n        self.folder_rename_btn.setEnabled(False)  # Disabled by default\n        self.folder_rename_btn.clicked.connect(self._rename_folder_to_serie)\n        folder_display_layout.addWidget(self.folder_display)\n        folder_display_layout.addWidget(self.folder_rename_btn)\n        file_panel_layout.addLayout(folder_display_layout)\n        self.file_table = FileTable(self)\n        self.file_table.setColumnCount(4)\n        self.file_table.setHorizontalHeaderLabels([": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 646
      }
    ],
    "))\n                    return\n                for s in sorted(self.issues_by_series):\n                    self.series_combo.addItem(f": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 897
      }
    ],
    ")\n        else:  # BDGest\n            # Check if SeriesName checkbox is checked\n            if self.series_name_cb.isChecked():\n                # Use series-only search\n                series_results = provider.search_series_only(q, debug=debug, verbose=verbose) \\\n                    if hasattr(provider, ": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 913
      }
    ],
    ")\n                else:\n                    # Clear album table since we": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 936
      }
    ],
    ")\n\n    def _enable_folder_rename_btn(self, *args):\n        self.folder_rename_btn.setEnabled(True)\n\n    def _on_album_selection_changed(self, selected, deselected):\n        # Enable if any row is selected, else disable\n        selected_rows = self.album_table.selectionModel().selectedRows()\n        self.folder_rename_btn.setEnabled(bool(selected_rows))\n\n    def _on_series_selection_changed(self, txt):\n        ": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 969
      }
    ],
    ", name=new_name))\n            return\n        if QMessageBox.question(self, tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1226
      }
    ],
    ", new_name=new_name), QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes:\n            try:\n                if not os.path.exists(str(f[": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1228
      }
    ],
    "]))\n                    return\n                os.rename(str(f[": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1231
      }
    ],
    "), str(e))\n\n    def _open_settings(self):\n        dlg = SettingsDialog(self, self.settings)\n        if dlg.exec():\n            # Invalidate BDGest session when settings change (credentials might have changed)\n            bdgest_provider = PROVIDERS.get(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1236
      }
    ],
    ")))\n        else:\n            # If nothing selected, show root folder name\n            self.folder_display.setText(os.path.basename(self.settings.value(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1262
      }
    ],
    ")))\n\n    def _rename_folder_to_serie(self):\n        # Get current folder path\n        if not self.files:\n            QMessageBox.warning(self, tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1265
      }
    ],
    "))\n            return\n        current_folder = pathlib.Path(self.files[0][": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1270
      }
    ],
    "))\n            return\n        itm = self.album_table.item(ar, 0)\n        meta = itm.data(Qt.UserRole) if itm else None\n        if not meta:\n            QMessageBox.critical(self, tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1276
      }
    ],
    "))\n            return\n        # Extract serie_name\n        serie_name = meta.get(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1281
      }
    ],
    "))\n            return\n        # Clean up names\n        clean = lambda s: ": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1298
      }
    ],
    "))\n            self._cancel_editing()\n            return\n        \n        # Check if folder with new name already exists\n        new_folder_path = self._original_folder_path.parent / cleaned_name\n        if new_folder_path.exists():\n            QMessageBox.critical(self.main_window, tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1481
      }
    ],
    ", name=cleaned_name))\n            self._cancel_editing()\n            return\n        \n        # Confirm rename\n        reply = QMessageBox.question(\n            self.main_window,\n            tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1488
      }
    ],
    ", name=cleaned_name))\n                \n            except Exception as e:\n                QMessageBox.critical(self.main_window, tr(": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1511
      }
    ],
    ", error=str(e)))\n                self._cancel_editing()\n                return\n        \n        # Reset to read-only mode\n        self._reset_to_readonly()\n\n    def _cancel_editing(self):\n        ": [
      {
        "file": "comicsFileRenamer_v3.py",
        "line": 1514
      }
    ]
  },
  "files_processed": 16,
  "total_strings": 365
}